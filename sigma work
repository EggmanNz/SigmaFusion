import { Text, View, StyleSheet } from 'react-native';
 import { Link } from 'expo-router'; 

export default function Index() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Home screen</Text>
      <Link href="/about" style={styles.button}>
        Go to About screen
      </Link>
      <Link href="/tempFood" style={styles.button}>
        Go to temp food screen
      </Link>
      <Link href="/tempSleep" style={styles.button}>
        Go to temp sleep screen
      </Link>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: '#fff',
  },
  button: {
    fontSize: 20,
    textDecorationLine: 'underline',
    color: '#fff',
  },
});




import { Text, View, StyleSheet } from 'react-native';

export default function AboutScreen() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>About screen</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    justifyContent: 'center',
    alignItems: 'center',
  },
  text: {
    color: '#fff',
  },
});




import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Button,
  Alert,
  Keyboard,
  TouchableWithoutFeedback,
  Dimensions,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
} from 'react-native';
import { PieChart } from 'react-native-chart-kit';

const TempFoodScreen = () => {
  const [fats, setFats] = useState('');
  const [carbohydrates, setCarbohydrates] = useState('');
  const [proteins, setProteins] = useState('');
  const [data, setData] = useState([]);

  const handleSubmit = () => {
    if (fats === '' || carbohydrates === '' || proteins === '') {
      Alert.alert('Error', 'Please fill in all fields');
      return;
    }

    const fatsValue = parseFloat(fats);
    const carbohydratesValue = parseFloat(carbohydrates);
    const proteinsValue = parseFloat(proteins);

    setData([
      { name: 'Fats', value: fatsValue, color: '#FF6384', legendFontColor: '#7F7F7F', legendFontSize: 15 },
      { name: 'Carbs', value: carbohydratesValue, color: '#36A2EB', legendFontColor: '#7F7F7F', legendFontSize: 15 },
      { name: 'Proteins', value: proteinsValue, color: '#FFCE56', legendFontColor: '#7F7F7F', legendFontSize: 15 },
    ]);

    Alert.alert('Input Submitted', `Fats: ${fats}, Carbohydrates: ${carbohydrates}, Proteins: ${proteins}`);
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
        <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
          <View>
          {data.length > 0 && (
          <PieChart
            data={data.map((item) => ({ name: item.name, population: item.value, color: item.color, legendFontColor: item.legendFontColor, legendFontSize: item.legendFontSize }))}
            width={Dimensions.get('window').width - 40} // Chart width
            height={220}
            chartConfig={{
              color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
            }}
            accessor="population"
            backgroundColor="transparent"
            paddingLeft="15"
            absolute // Show exact values inside the chart
          />
        )}

            <Text style={styles.label}>Fats (g):</Text>
            <TextInput
              style={styles.input}
              keyboardType="numeric"
              placeholder="Enter fats in grams"
              placeholderTextColor="blue"
              value={fats}
              onChangeText={setFats}
            />

            <Text style={styles.label}>Carbohydrates (g):</Text>
            <TextInput
              style={styles.input}
              keyboardType="numeric"
              placeholder="Enter carbohydrates in grams"
              placeholderTextColor="blue"
              value={carbohydrates}
              onChangeText={setCarbohydrates}
            />

            <Text style={styles.label}>Proteins (g):</Text>
            <TextInput
              style={styles.input}
              keyboardType="numeric"
              placeholder="Enter proteins in grams"
              placeholderTextColor="blue"
              value={proteins}
              onChangeText={setProteins}
            />

            <Button title="Submit" onPress={handleSubmit} />
          </View>
        </ScrollView>
      </TouchableWithoutFeedback>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  label: {
    fontSize: 18,
    marginVertical: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 10,
    fontSize: 16,
    backgroundColor: '#fff',
  },
});

export default TempFoodScreen;




import { Picker } from '@react-native-picker/picker';
import React, { useState } from 'react';
import { 
  Text, 
  View, 
  TextInput, 
  StyleSheet, 
  Button, 
  Alert, 
  Keyboard, 
  TouchableWithoutFeedback 
} from 'react-native';

export default function SleepScreen() {
  const [hours, setHours] = useState('');
  const [quality, setQuality] = useState('Good');

  const handleSubmit = () => {
    Alert.alert('Sleep Data', `You slept for ${hours} hours. Quality: ${quality}.`);
  };

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
      <View style={styles.container}>
        <Text style={styles.header}>Sleep Tracker</Text>

        {/* Hours Input */}
        <Text style={styles.label}>Hours of Sleep:</Text>
        <TextInput
          style={styles.input}
          placeholder="Enter hours"
          keyboardType="numeric"
          value={hours}
          onChangeText={setHours}
          returnKeyType="done"
        />

        {/* Quality Picker */}
        <Text style={styles.label}>Quality of Sleep:</Text>
        <View style={styles.pickerContainer}>
          <Picker
            selectedValue={quality}
            onValueChange={(itemValue) => setQuality(itemValue)}
            style={styles.picker}
            itemStyle={styles.pickerItem}
          >
            <Picker.Item label="Good" value="Good" />
            <Picker.Item label="Okay" value="Okay" />
            <Picker.Item label="Poor" value="Poor" />
          </Picker>
        </View>

        {/* Submit Button */}
        <Button title="Submit" onPress={handleSubmit} />
      </View>
    </TouchableWithoutFeedback>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  header: {
    fontSize: 24,
    color: '#fff',
    marginBottom: 20,
  },
  label: {
    fontSize: 18,
    color: '#fff',
    alignSelf: 'flex-start',
    marginBottom: 5,
  },
  input: {
    width: '100%',
    padding: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    marginBottom: 20,
    backgroundColor: '#fff',
  },
  pickerContainer: {
    width: '100%',
    height: 100, // Adjusted height for a cleaner scroll effect
    backgroundColor: '#fff',
    borderRadius: 5,
    justifyContent: 'center', // Centers content vertically
    marginBottom: 10,
    overflow: 'hidden',
  },
  picker: {
    width: '100%',
    height: '225%',
  },
  pickerItem: {
    fontSize: 20,
    color: '#25292e',
    textAlign: 'center',
  },
});




import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" options={{ title: 'Home' }} />
      <Stack.Screen name="about" options={{ title: 'About' }} />
      <Stack.Screen name="tempFood" options={{ title: 'Temporary Food' }} />
      <Stack.Screen name="tempSleep" options={{ title: 'Temporary Sleep' }} />

    </Stack>
  );
}
